{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TrueConsense \u00b6 TrueConsense is a nucleotide consensus caller capable of creating a biologically valid consensus-sequence in reference-based virus sequencing experiments. TrueConsense is, in contrast to more common consensus-sequence methodology, not using VCF files. Instead, a consensus-sequence is made directly from a BAM-file in order to get a proper view of positional context. TrueConsense compensates for common sequencing and/or alignment artefacts, keeps track of open reading frames, and is able to generate consensus-sequences on multiple coverage-thresholds at the same time. TrueConsense is available under the AGPLv3 licence","title":"Home"},{"location":"#trueconsense","text":"TrueConsense is a nucleotide consensus caller capable of creating a biologically valid consensus-sequence in reference-based virus sequencing experiments. TrueConsense is, in contrast to more common consensus-sequence methodology, not using VCF files. Instead, a consensus-sequence is made directly from a BAM-file in order to get a proper view of positional context. TrueConsense compensates for common sequencing and/or alignment artefacts, keeps track of open reading frames, and is able to generate consensus-sequences on multiple coverage-thresholds at the same time. TrueConsense is available under the AGPLv3 licence","title":"TrueConsense"},{"location":"installation/","text":"Installation instructions \u00b6 TrueConsense is only available on Linux (or Linux-based) operating systems. MacOS may also work but is not tested. TrueConsense will not work on Windows. TrueConsense will be made available for installation through Conda and Pip. However, this is currently not yet available. We will update these docs when installation through Conda and/or pip is available. Prerequisistes \u00b6 TrueConsense requires Python 3.7 or later to be installed on your system (or in an environment). Other dependencies will be installed during the installation, your don't have to install them manually. These extra dependencies are as follows: pysam<0.16 pysamstats>=1.1.2 pandas>=1.2.3 gffpandas>=1.2.0 parmap>=1.5.2 tqdm>=4.59.0 biopython>=1.78 We strongly advise you to use a conda environment (or similar) to make sure there won't be any conflicts in package dependencies. Download and install from source \u00b6 First start by cloning the repository and checkout out the latest released version of TrueConsense: git clone https://github.com/RIVM-bioinformatics/TrueConsense.git ; cd TrueConsense ; git checkout tags/ $( git tag --sort = committerdate | tail -1 ) >> /dev/null You're now in the newly create \"TrueConsense\" directory. Make a new Conda environment before continuing If you have Conda installed on your system, please create and activate a new environment before continuing. Use the following command to create and activate a new Conda environment named \"TrueConsense\" based on the environment-recipe we provide in the github-repository conda env create -f env.yml ; conda activate TrueConsense The \"TrueConsense\" conda-environment should now be active. You can now install TrueConsense via the following command: pip install . TrueConsense should now be installed! You can verify if installation was successful by typing trueconsense --version on the command-line, this should show the installed TrueConsense version. Pipeline/workflow inegration \u00b6 You can easily integrate TrueConsense in your snakemake bioinformatics workflow if you use Conda environments in your workflow. To do this, simply add the following structure to your conda-environment recipe, replace {VERSION} with the TrueConsense version you wish to use: dependencies : - pip - pip : - git+https://github.com/RIVM-bioinformatics/TrueConsense.git@{VERSION} Conda will now install TrueConsense and its dependencies in the specified snakemake conda-environment.","title":"Installation"},{"location":"installation/#installation-instructions","text":"TrueConsense is only available on Linux (or Linux-based) operating systems. MacOS may also work but is not tested. TrueConsense will not work on Windows. TrueConsense will be made available for installation through Conda and Pip. However, this is currently not yet available. We will update these docs when installation through Conda and/or pip is available.","title":"Installation instructions"},{"location":"installation/#prerequisistes","text":"TrueConsense requires Python 3.7 or later to be installed on your system (or in an environment). Other dependencies will be installed during the installation, your don't have to install them manually. These extra dependencies are as follows: pysam<0.16 pysamstats>=1.1.2 pandas>=1.2.3 gffpandas>=1.2.0 parmap>=1.5.2 tqdm>=4.59.0 biopython>=1.78 We strongly advise you to use a conda environment (or similar) to make sure there won't be any conflicts in package dependencies.","title":"Prerequisistes"},{"location":"installation/#download-and-install-from-source","text":"First start by cloning the repository and checkout out the latest released version of TrueConsense: git clone https://github.com/RIVM-bioinformatics/TrueConsense.git ; cd TrueConsense ; git checkout tags/ $( git tag --sort = committerdate | tail -1 ) >> /dev/null You're now in the newly create \"TrueConsense\" directory. Make a new Conda environment before continuing If you have Conda installed on your system, please create and activate a new environment before continuing. Use the following command to create and activate a new Conda environment named \"TrueConsense\" based on the environment-recipe we provide in the github-repository conda env create -f env.yml ; conda activate TrueConsense The \"TrueConsense\" conda-environment should now be active. You can now install TrueConsense via the following command: pip install . TrueConsense should now be installed! You can verify if installation was successful by typing trueconsense --version on the command-line, this should show the installed TrueConsense version.","title":"Download and install from source"},{"location":"installation/#pipelineworkflow-inegration","text":"You can easily integrate TrueConsense in your snakemake bioinformatics workflow if you use Conda environments in your workflow. To do this, simply add the following structure to your conda-environment recipe, replace {VERSION} with the TrueConsense version you wish to use: dependencies : - pip - pip : - git+https://github.com/RIVM-bioinformatics/TrueConsense.git@{VERSION} Conda will now install TrueConsense and its dependencies in the specified snakemake conda-environment.","title":"Pipeline/workflow inegration"},{"location":"user-guide/","text":"User guide \u00b6 In order for TrueConsense to keep track of the various aspects of the viral-genome, it is necessary to have enough contextual information to work with. In order to run TrueConsense you will need the following information/files: Your aligned reads in BAM format, preferably created with Minimap2 + samtools A reference sequence in FASTA format. This should be the same fasta that you used for your alignment. An overview of genomic features matching the reference sequence, in GFF3 format The samplename Basic usage example \u00b6 In TrueConsense, the --output / -o flag corresponds to an output directory instead of a single file. This is because TrueConsense can create multiple consensus-sequences at the same time. These various consensus-sequences will then be generated in the given output directory. It's also necessary to provide the samplename to TrueConsense as the output consensus-sequence will follow a format as {SAMPLENAME}_cov_ge_{COVERAGE_THRESHOLD}.fa where {SAMPLENAME} and {COVEREAGE_THRESHOLD} will be replaced by the given information. When running TrueConsense, it's generally best to provide the same amount of threads as the various coverage-thresholds you wish to generate. For example: if you wish to generate consensus-sequences at thresholds 1, 5, and 10, then it's best to also provide 3 threads. Example 1 : Create a consensus-sequence at coverage-thresholds 1, 5, and 10. Using 3 threads. trueconsense \\ --input input.bam \\ --reference reference.fasta \\ --features reference-features.gff \\ --samplename example \\ --output test_output/ \\ --coverage-levels 1 5 10 \\ --threads 3 This command will generate the following output-files in the test_output directory: example_cov_ge_1.fa example_cov_ge_5.fa example_cov_ge_10.fa Aside from just creating a consensus-sequence, TrueConsense can also provide you with VCF-files, updated GFF files and a coverage overview which you can use for downstream analysis. Generating a coverage overview TrueConsense can generate a per-position depth-of-coverage overview that you can use in a downstream analysis. This file can be generated with the --depth-of-coverage / -doc flag, the output will be provided in TSV format. Example: trueconsense \\ --input input.bam \\ --reference reference.fasta \\ --features reference-features.gff \\ --samplename example \\ --output test_output/ \\ --coverage-levels 1 5 10 \\ --depth-of-coverage example_coverage.tsv \\ --threads 3 Generating VCF-files per coverage threshold TrueConsense can generate a VCF file per coverage threshold that matches the generated consensus-sequence on that particular coverage threshold. With this, you can easily generate the various VCF-files in case a downstream analysis requires VCF input. Or if you wish to share data with other researchers but it's not possible to share (large)Fasta files. The VCF-output can be generated with the --variants / -vcf flag, this flag corresponds to an output directory and not a single file. The generated files follow the same naming structure as the normal consensus-sequences. Example: trueconsense \\ --input input.bam \\ --reference reference.fasta \\ --features reference-features.gff \\ --samplename example \\ --output test_output/ \\ --coverage-levels 1 5 10 \\ --variants vcf_output/ \\ --threads 3 Generating updated GFF files per coverage threshold TrueConsense keeps track of the open reading frames given in the input-gff and determines new stop-positions and/or new start-positions when applicable for every open reading frame in the input. This is done to make sure the generated consensus-sequence is possible when it comes to virus-biology. The updated GFF-files can be generated with the --output-gff / -ogff flag, this flag corresponds to an output directory and not a single file. The generated files follow the same naming structure as the normal consensus-sequences. Example: trueconsense \\ --input input.bam \\ --reference reference.fasta \\ --features reference-features.gff \\ --samplename example \\ --output test_output/ \\ --coverage-levels 1 5 10 \\ --output-gff gff_output/ \\ --threads 3 TrueConsense calls IUPAC nucleotide ambiguity-codes by default when an aligned-position has an even (or near-even) split of nucleotides. This can be turned off by providing the --noambiguity / -noambig flag. Please note that this will cause TrueConsense to choose the most prominent nucleotide on a split-position, if the split is exactly even on such a position then a random choice will be made between the two (or three) possibilities. Limitations \u00b6 TrueConsense only works with alignments in BAM-format as an input. Other inputs such as SAM or CRAM are currently not supported. Additionally, the generated VCF-files are formatted in a way that they can be used to reconstruct the consensus-sequence when sharing the VCF files with other researchers/institutes/etc with a tool such as bcftools consensus . That also means that these VCF-files may not always follow the specifications for VCF-files, for example when ambiguity nucleotides are present in the VCF file. The generated VCF-files are made in a way that a tool such as bcftools can use it, but these VCF-files may not always work in other tools such as IGV.","title":"User guide"},{"location":"user-guide/#user-guide","text":"In order for TrueConsense to keep track of the various aspects of the viral-genome, it is necessary to have enough contextual information to work with. In order to run TrueConsense you will need the following information/files: Your aligned reads in BAM format, preferably created with Minimap2 + samtools A reference sequence in FASTA format. This should be the same fasta that you used for your alignment. An overview of genomic features matching the reference sequence, in GFF3 format The samplename","title":"User guide"},{"location":"user-guide/#basic-usage-example","text":"In TrueConsense, the --output / -o flag corresponds to an output directory instead of a single file. This is because TrueConsense can create multiple consensus-sequences at the same time. These various consensus-sequences will then be generated in the given output directory. It's also necessary to provide the samplename to TrueConsense as the output consensus-sequence will follow a format as {SAMPLENAME}_cov_ge_{COVERAGE_THRESHOLD}.fa where {SAMPLENAME} and {COVEREAGE_THRESHOLD} will be replaced by the given information. When running TrueConsense, it's generally best to provide the same amount of threads as the various coverage-thresholds you wish to generate. For example: if you wish to generate consensus-sequences at thresholds 1, 5, and 10, then it's best to also provide 3 threads. Example 1 : Create a consensus-sequence at coverage-thresholds 1, 5, and 10. Using 3 threads. trueconsense \\ --input input.bam \\ --reference reference.fasta \\ --features reference-features.gff \\ --samplename example \\ --output test_output/ \\ --coverage-levels 1 5 10 \\ --threads 3 This command will generate the following output-files in the test_output directory: example_cov_ge_1.fa example_cov_ge_5.fa example_cov_ge_10.fa Aside from just creating a consensus-sequence, TrueConsense can also provide you with VCF-files, updated GFF files and a coverage overview which you can use for downstream analysis. Generating a coverage overview TrueConsense can generate a per-position depth-of-coverage overview that you can use in a downstream analysis. This file can be generated with the --depth-of-coverage / -doc flag, the output will be provided in TSV format. Example: trueconsense \\ --input input.bam \\ --reference reference.fasta \\ --features reference-features.gff \\ --samplename example \\ --output test_output/ \\ --coverage-levels 1 5 10 \\ --depth-of-coverage example_coverage.tsv \\ --threads 3 Generating VCF-files per coverage threshold TrueConsense can generate a VCF file per coverage threshold that matches the generated consensus-sequence on that particular coverage threshold. With this, you can easily generate the various VCF-files in case a downstream analysis requires VCF input. Or if you wish to share data with other researchers but it's not possible to share (large)Fasta files. The VCF-output can be generated with the --variants / -vcf flag, this flag corresponds to an output directory and not a single file. The generated files follow the same naming structure as the normal consensus-sequences. Example: trueconsense \\ --input input.bam \\ --reference reference.fasta \\ --features reference-features.gff \\ --samplename example \\ --output test_output/ \\ --coverage-levels 1 5 10 \\ --variants vcf_output/ \\ --threads 3 Generating updated GFF files per coverage threshold TrueConsense keeps track of the open reading frames given in the input-gff and determines new stop-positions and/or new start-positions when applicable for every open reading frame in the input. This is done to make sure the generated consensus-sequence is possible when it comes to virus-biology. The updated GFF-files can be generated with the --output-gff / -ogff flag, this flag corresponds to an output directory and not a single file. The generated files follow the same naming structure as the normal consensus-sequences. Example: trueconsense \\ --input input.bam \\ --reference reference.fasta \\ --features reference-features.gff \\ --samplename example \\ --output test_output/ \\ --coverage-levels 1 5 10 \\ --output-gff gff_output/ \\ --threads 3 TrueConsense calls IUPAC nucleotide ambiguity-codes by default when an aligned-position has an even (or near-even) split of nucleotides. This can be turned off by providing the --noambiguity / -noambig flag. Please note that this will cause TrueConsense to choose the most prominent nucleotide on a split-position, if the split is exactly even on such a position then a random choice will be made between the two (or three) possibilities.","title":"Basic usage example"},{"location":"user-guide/#limitations","text":"TrueConsense only works with alignments in BAM-format as an input. Other inputs such as SAM or CRAM are currently not supported. Additionally, the generated VCF-files are formatted in a way that they can be used to reconstruct the consensus-sequence when sharing the VCF files with other researchers/institutes/etc with a tool such as bcftools consensus . That also means that these VCF-files may not always follow the specifications for VCF-files, for example when ambiguity nucleotides are present in the VCF file. The generated VCF-files are made in a way that a tool such as bcftools can use it, but these VCF-files may not always work in other tools such as IGV.","title":"Limitations"}]}